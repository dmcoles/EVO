E-VO v3.5.0 :

Formerly : GRIO Amiga E Compiler !

Changes maked from Amiga E v3.3a:

Optimisations:
  (3.3b)
    Better ELSEIF:
        Was:                    Is:
        Scc     D0              Bcc     xxx
        EXT.W   D0
        EXT.L   D0
        BEQ     xxx
    
    Testing data in D0:
        Was:                    Is:
            MOVE.L  xx(Ax),D0
                OR
            MOVE.L  Dx,D0
        TST.L   D0              Bcc     xxx
        Bcc     xxx
    
    Stack back:
        Was:                    Is:
            JSR     xxxPROC/EFUNC
        LEA     4(A7),A7        ADDQ.L  #4,A7
  (3.3c)
    Short instruction for interval (-128;127):
        Was:                    Is:
            MOVE.L  xxxx,D0
        CMP.L   #0,D0           BEQ     xxx
        or
        TST.L   D0
        BEQ     xxx
        Was:                    Is:
        CMP.L   #1,D0           MOVEQ   #1,D1
        BEQ     xxx             CMP.L   D1,D0
                    BEQ     xxx

        Was:                    Is:
        OR.L    #-1,D0          MOVEQ   #-1,D1
                    OR.L    D1,D0

        Was:                    Is:
        SUB.L   #25,D0          MOVEQ   #25,D1
                    SUB.L   D1,D0

        Was:                    Is:
        ...                     ...

    MOVEM instrunction:
        Was:                    Is:
        MOVEM.L D3,-(A7)        MOVE.L  D3,-(A7)
        MOVEM.L (A7)+,A5        MOVEA.L (A7)+,A5

    Start value for variable:
        Was:                    Is:
        MOVEQ   #0,D0           MOVEQ   #0,D0
        MOVE.L  D0,-$0224(A4)   MOVE.L  D0,-$0224(A4)
        MOVEQ   #0,D0           MOVE.L  D0,-$0228(A4)
        MOVE.L  D0,-$0228(A4)

    NEW [1,x,10000]:
        Was:                    Is:
        MOVE.L  D0,(A7)         MOVE.L  D0,(A7)
        MOVEQ   #1,D0           MOVEA.L D0,A6
        MOVE.L  (A7),A6         MOVEQ  #1,D0
        MOVE.L  D0,4(A6)        MOVE.L  D0,4(A6)
        MOVE.L  x(A5),D0        MOVE.L  x(A5),D0
        MOVE.L  (A7),A6         MOVE.L  D0,8(A6)
        MOVE.L  D0,8(A6)        MOVE.L  #10000,D0
        MOVE.L  #10000,D0       MOVE.L  D0,12(A6)
        MOVE.L  (A7),A6
        MOVE.L  D0,12(A6)

    Zero offset to Ax register:
        Was:                    Is:
        MOVE.L  (A7)+,$0000(A0) MOVE.L  (A7)+,(A0)
        MOVE.L  D0,$0000(A7)    MOVE.L  D0,(A7)

   (3.3d)
    Removed LINK A5,#-XXXX/UNLK A5:
        if PROC haven't args and vars


    Put element to the list:

        Was:                    Is:
        LEA     xx(PC),A0       PEA     xx(PC)
        MOVE.L  A0,D0
        MOVE.L  D0,-(A7)

        Was:                    Is:
        MOVE.L  #xx,D0          PEA     xx.(W/L)
        MOVE.L  D0,-(A7)

        Was:                    Is:
        MOVE.L  xx(A4/A5)/Dx,D0 MOVE.L  xx(A4/A5)/Dx,-(A7)
        MOVE.L  D0,-(A7)

   (3.3f)
    Some improvements in EAEXP.

   (3.3g)


Added features:
  (3.3b)
    -Possible to use EXIT in LOOP/ENDLOOP and REPEAT/UNTIL .
    -Improved functions:
        StrCopy()
        StrCmp()
        StrAdd()
        MidStr()
        ForAll()
        Exitst()
        SelectList()
        FileLength()
        ReadStr()       ->      much faster
        MapList()
        ListCmp()
        ListAdd()
        ListCopy()
        String()
        OstrCmp() .
    -New function StriCmp() -> case sensitive version of StrCmp() .
  (3.3c)
    -String joining in the list by "+" . 
    -Get/set list elements by 1+a .
    -Function InStri() -> like InStr() but it case sensitive .
    -Geting address of object member/method: {abc.a[3].z} .
    -Line number report in branches .
    -OPT STRMERGE for string merging .
    -EXPORT ignored if not used in MODULE .
  (3.3d)
    -In definition OBJECT or var array size can be defined by [4*3+1]
    -DEF a:REG abc now accepted .
    -"=>" and ">=" it's the same , "=<" and "<=" it's the same .
    -Things like that : Func()::blah.a now is possible .
    -Using OPT 020+ we get improved code :
     1. to the startup compiler put test code for entered CPU
     2. inline mul/div (*;/) working for long sizes
     3. function Mul()/Div() is patched for 020+
     4. EXT.W;EXT.L is changed to EXTB.L .
   (3.3e)
    -Modified startup code .
    -REGS var in HANDLER PROC ( only if you define them ,
     no in optimisation ).Becarefull with that this maybe very dangerous
     if you use REGS var in HANDLE'r.
    -Using LONG label -> we get reloc of entered label .
    -Short version ARRAY definition in PROC/OBJECT ( DEF a[10]:CHAR ) .
    -NOALIGN keyword for OBJECT definition , it's turn off auto align 
     odd members (example : OBJECT blah NOALIGN ).
    -INC/DEC extension : INC x,20 ( x:=x+20 ) .
    -ASM mnemonics:
        MUL(U/S) AND DIV(U/S)   - long size
        EXTB.L
    -NOT keyword for IF/WHILE/UNTIL expresion .
    -UNION keyword for OBJECT's definitions :
           OBJECT abc
             a:LONG
             UNION
               [b:INT,c,d]
               [
                e:CHAR
                f:LONG
                g:INT
               ]
             ENDUNION
             k:PTR TO LONG
          -> or something like that :
             UNION [
              [b:INT,c,d],
              [e:CHAR,f:LONG,
               g:INT]
             ]
           ENDOBJECT
    -Added operators : &  eq AND
              || eq OR
              ~  eq NOT .
    -Possible assigment in member/list elements ([a.e:=0]) .
  (3.3f)
    -New functions:
        StrClone(estr) - duplicate estring
        ListClone(elist) - only long size elements
        GetA4() - ...
    -Keyword SAFE for PROC's ( ex: PROC SAFE bla(a,b) ) :
        result push REG's D2-D7/A2-A6 on the stack .
    -OPT RUNBG - run background ( 2 vers 4 kick<v37 & kick>=v37 ) .
    -Modified startup code (to work with or without RUNBG , and
        fake stack is setup ).
    -New global var "thistask" .
    -Modified LIBRARY startup/Open/Close ; tasks never be hash-tabled
     but tabled by dynamic allocated one linked list .
    - "//" is a comment .
    -Added exporting in MODULE arg name for method's ;
         optional can be switched off by new keyword OLD
     ( ex: OPT MODULE OLD ); update ShowModule tool for display "new"
     module .
  (3.3g)
    - Improved fake stack setting , now is more os compatible
      ( used exec SwapStack() for OS v37 else old things ).
    - Added PRIVATE methods in OOP ( PROC bla() OF abc PRIVATE IS EMPTY )
    - member can be used as method ( OBJECT abc;a,b;ENDOBJECT -> abc.a(1,2) )
    - possible set PROC/label address in static list like this [1,2,main]
      ( old mode [1,2,{main}]  ; is still working  ,but code is longer )
    - registers can be used as normal variable ( very beta )
    - EXTRA keyword for LIBRARY mode (idea taken from CreativE) :
      LIBRARY namestring,version,revision,versionstring EXTRA value IS ...;
      now library base can have more variables
    - PREPROCESS'ing is on at beginnig , OPT PREPROCESS leaved for down compatibility.
    - Added shift expresion (exp. CONST  ABC=1<<4; x:=y<<3 ).
    - Function added AstringF - like StringF but for normal string's

    
Fixed Bugs:
  (3.3b)
    -Functions:
        Facos()
        Fsinh()
        ... .
  (3.3c)
    -Bad object reference:
        OBJECT bla
        brr
        ENDOBJECT
        PROC main()
        DEF i:bla
        WriteF('\d\n',i.brr.brr)
        ENDPROC
    -MOVEQ #-128,D0 now accepted .
    -Default member in object now is PTR TO CHAR .
    -RAISE error report .
    -Error report without "]" in DEF a[ .
    -Library base showed unref if called in other module .
    -EOR.L #3,D0 changed to EORI.L #3,D0 .
   (3.3d)
    -Get address member then a first is dereference : {a::abc.c} .
   (3.3e)
    -Getting address member if he not defined .
    -Bad brach set in LIBRARY if OPT CPU not used .
    -Things like:
        IF IF x THEN x ELSE x=y THEN y ELSE 0
     generating bad code .
    -"IF" optimiser cut TST after functions/procedures;
        Example:
        IF CtrlC() THEN Raise(ERR_BREAK)
        CODE:
        BSR     CtrlC
        BEQ     xxx .
   (3.3f)
    - Bad reporting in case: OBJECT bla; a,b,c ;PROC zzz() ( or CONST ...)
      error message "label expected" - now "incorrect object definition" .
    - Small fixes in head code in LIBRARY output .
    - Raise() in LIBRARY if PROC isn't have HANDLE'r JUMP to $0 address .
    - Small bug in geting var address .
    - Agrrh... nasty bug in close library routine . Resolved.
    - Fake stack maker bug ( in setting Upper/Lower pointers) .
   (3.3g)
    - Another bugs fixed in "get address " sequence (ex.: {a.c[a]} ).
    - Problem with definition static OBJECT's and UNION's members.
    - Small bug in reg exp

Development restarted as E-VO by Darren Coles
   (3.4.0)
    - Name change to E-VO
    - New version numbering 3.4.0
    - Add CONT command, similar to EXIT but continues the loop at the top
      instead of dropping out.
    - Make default cpu 68000
    - Make stack buffer configurable (and default it to 50k)
    - Fix file handle leak
    - Fixed breaking defect MIDSTR command
    - Allow CONT and EXIT commands to be called inside an IF or SELECT
    - Add ANDALSO and ORELSE short circuit versions of AND and OR
    - Optimised IF/WHILE/REPEAT expressions and removed TST immediately
      following MOVEQ
    - Fixed KickVersion not returning true when version number is exactly
      equal to the requested version
    - Allow String(0) which was valid in E v3.3a
    - Show line numbers for unused variables/labels/procs
    - Allow new formatting characters \u (unsigned long) \q (double quote)
      \! (ascii bell) \v (vertical tab) \xHH (hex char) (taken from
      CreativE)
    - Allow macros to be defined by passing in DEFINE command line
      parameter (taken from CreativE / ECX)
    - Allow string consts (taken from CreativE)
    - Added #date preprocessor (taken from CreativE but enhanced with hours
      minutes and seconds options)
    - Added DoMethod, DoMethodA, CoerceMethod, CoerceMethodA,
      DoSuperMethod, DoSuperMethodA, Set, Sets, Get, Gets, CtrlD, CtrlE, CtrlF,
      Chk, Eof, Fopen, Fclose, Alloc, Free, PutF, ReadB, WriteB, Size, Lsl, Lsr
      functions (all taken from CreativE)
    - We now have optimised versions of WriteF, PrintF, PutF when targetting
      OS 37.
    - Added SHOWFNAME command line parameter.
    - Reverted order of efunctab back to how it was in E to restore
      compatibility with pre-compiled E modules that are using Mul Div or
      WriteF.
    - Added the following functions:
        LowerChar(c), UpperChar(c) - takes a char and returns a char
        StrAddChar(s,c) - Adds a single character to an estring
        ListAddItem(l,i) - Adds a single item to an elist
    - Immediate assignments for values -256 to 254 for even numbers converted
      to MOVEQ followed by ADD.L D0,D0
    - Optimised NEW [] list creation to remove duplicate moves into D0
      eg. NEW [0,0,0,0]
    - Added OPT PURE to check for non pure code (eg variables in static
      lists/objects and GetA4 call)
    - Optimisation: Removed TST.L D0 after EXT.L D0 in IF/WHILE/REPEAT etc
      conditions.
    - Optimisation for default values for reg vars into single MOVE
      instruction.
    - Optimisation for reg var assignments where moveq is used into a single
      MOVE instruction where possible.
    - Added warning when compiling a library that OPT PURE is recommended
    - Optimisation for reg var assignments where moveq+add is used.
    - Optimisations with FOR loops to remove redundant move instructions.
    - Added FATAL 'string' command which generates no code but will fail
      the compilation (useful for use with #ifdef)
    - Added WARN 'string' command which generates no code but will show
    - a warning during compilation
    - Added EVO_3_4_0 auto generated #define macro which will allow you
      to check for a minimum version of the compiler. New defines will be
      additionally created for each new version of the software.
    - Added #ELSE #ELIFDEF #ELIFNDEF preprocessor commands
    - Added #UNDEF preprocessor command
    - Added 020 optimised versions of Long, Int and Char functions
    - Added StrIns(estring,estring,pos) - insert string function
    - Added StrRem(estring,pos,len) - remove substring function
    - Store full path of source files when generating debug hunk (allows
      EDBG to find the files if they are not all located in the same
      folder).
    - v47 (OS3.2) emodules, including all the new reaction interfaces
    - ARRAY OF CHAR no longer word aligned in OBJECTS
    - NOT operator works correctly with immediate values (eg "NOT 0" did not
      work correctly.
    - MUL/DIV optimisations also working for 020 generated code.
    - NOALIGN now requires 020 as accessing unaligned INT or LONG will result
      in exception if you don't have 020.
    - Fixed optimiser bug in library calls where IF function was used in
      a parameter that prevented the correct value from being passed.
    - Fix: x AND 0 was returning incorrect value
    
   (3.4.1)
    - Fix: Optimisation error where multiple variables set to the same value
      were not set correctly.
    - Made the select source file window wider in EDBG to account for the
      full path being displayed.

   (3.5.0)
    - Added ac020 object with pad int to allow optimised 32 bit writes on
      020+ courtesy of Samuel D. Crow
    - When compiling in debug, disable the optimisation that removes LINK,
      UNLK in procs where not needed (EDBG doesnt step properly when these
      aren't present)
    - EDBG: Add case insensitive search
    - EDBG: Added search next
    - EDBG: Display variable values in both hex and decimal
    - Fixed: Clears an extra byte in the String() initialisation causing
      memory corruption in the case of String(0)
    - EDBG: Enhanced breakpoints - multiple can now be set and can be
      seen/set in a column next to the code
    - EDBG: Support for multiple breakpoints and debugging while code is
      running.
    - EDBG: Added support for debugging under OS4.x (eg without using CPU
      exceptions)
    - EDBG: Added support for adding watch variables by entering name
    - Added support for DEBUG50 mode which allows debugging using JSR
      instructions instead of causing cpu exceptions which allows debugging
      under OS 4.x
    - Added support for multi-dimensional arrays
    - Added support for PTR TO PTR variables
    - Added EVO_3_5_0 define
    - Added ? operator (ported from CreativE)
    - Added OPT FPEXP (fpu floating point support - ported from CreativE)
    - Added :=: swap operator (ported form CreativE)
    - Added OPT INLINE (ported from CreativE)
    - Added OPT NOSTARTUP (ported form CreativE)
    - Added OPT UTILLIB (ported from CreativE)
    - Added NOREGS option (ported from CreativE)
    - Updated module format (now version 12) to account for multi-dimension
      arrays and PTR TO PTR type in object members
    - Ported some optimisation code from CreativE
    - Added ENDPROC WITH function (ported from CreativE)
    - Added == operator (range check - ported from CreativE)
    - Added new system constants TAG_DONE, TAG_END, TAG_INORE, TAG_MORE,
      TAG_SKIP, TAG_USER, OFFSET_BEGINNING, OFFSET_BEGINING, OFFSET_CURRENT,
      OFFSET_END (ported from CreativE)
    - Added new utilitybase variable
    - Added 020+ optimised MOD function
    - Added support for += -= etc operators (ported from CreativE)
    - ShowModule: Added support for new module format (version 12)
    - Added improved LONG,INT,CHAR routines from CreativE which allow
      expressions
    - Added improved SIZEOF command that allows SIZEOF objectvar
    - Allow \xNN for hex char in strings
    - Add ELSEWHILE and ALWAYS extension to WHILE LOOP (from CreativE)
    - Improvements to SELECT x to allow expressions (from CreativE)
    - Added LEGACY option to output module format version 10 and disable newer
      features
    - Fix: 2 << obj.val was generating corrupt code
    - Add SECTION (code and data) support
    - Fix: ReadStr return value was not completely compatible with EC (fix
      Pragma2Module bug)
    - ShowModule: Add -e parameter which will force output into a form that
      can be directly recompiled
    - Added a scanf module in the other folder
    - Allow string consts in modules
    - Allow float CONST definitions
    - Remove some unused startup code when OPT ASM in use.
    - ShowModule: Added support for string CONSTs
    - Added OFFSETOF to get the offset of a member of an object
    - Added MemFill, AstrClone, ListInsItem, ListRemItem, ListSwapItem functions     
    - EDBG: Support for sections
    - FindModule: Coded new FindModule application from scratch with support
      for latest module format.
    - Make second parameter of SetStr optional and if not specified it will
      set the calculate the string length automatically
    - Added EndsWith function eg EndsWith(s,'A') returns TRUE if a string1 ends
      with string2
    - Fix: CHAR '' or CONST STR='' would cause memory corruption
    - Fix "3*SIZEOF LONG" error
    - added AstpCopy and UsedStack and StackSize functions

   (3.5.1)
    - fix issue with short jump calculations being done incorrect in certain
      circumstances, causing crashes.
    - fix casing of math ieee functions to match original E modules
    - disable OPT POOL and OPT UTILLIB in legacy mode
    - disable THISTASK, __POOL and UTILITYBASE in legacy mode
    - reinstate [] in immediate list to previous E functionality (a blank
      0 item list)
    - fix optimisation issue where MOVE.B (A0),D0 and MOVE.W (A0),D0 followed
      by TST.L would be optimised incorrectly.
    - fix issue with immediate lists, ListMax() could not be used as the max
      size was not populated.
    - allow 0 length lists to be created eg List(0)
    -  add showhunk source

   (3.6.0)
   - fix issue with memfill that could cause odd address exception on 68000
   - add TRY..CATCH..ENDTRY allowing more control over exception handling
   - Add UNTILN, WHILEN ELSEWHILEN, IFN, ELSEIFN, EXITN, CONTN which are inverse of their counterparts 
     eg. UNTILN x is equal to UNTIL x=0
   
   
DATE HISTORY:
    3.3b    20.11.1999 -> 12.12.1999
    3.3c    15.12.1999 -> 12.01.2000
    3.3d    21.01.2000 -> 02.03.2000
    3.3e    05.04.2000 -> 22.06.2000
    3.3f    03.01.2001 -> 15.10.2001
    3.3g    04.01.2002 -> 16.06.2003
    3.4.0   09.06.2021 -> 07.10.2021
    3.4.1   19.10.2021 -> 23.10.2021
    3.5.0   04.11.2021 -> 14.07.2022
    3.5.1   08.08.2022 -> 06.09.2222
    3.6.0   14.11.2022 -> ?